/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// Couchbase, Inc. licenses this to you under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.

// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

package couchbasecapella

import (
	"encoding/json"
	"fmt"
)

// AzureRegions the model 'AzureRegions'
type AzureRegions string

// List of azureRegions
const (
	CENTRALUS     AzureRegions = "centralus"
	EASTUS2       AzureRegions = "eastus2"
	EASTUS        AzureRegions = "eastus"
	FRANCECENTRAL AzureRegions = "francecentral"
	JAPANEAST     AzureRegions = "japaneast"
	NORTHEUROPE   AzureRegions = "northeurope"
	SOUTHEASTASIA AzureRegions = "southeastasia"
	UKSOUTH       AzureRegions = "uksouth"
	WESTEUROPE    AzureRegions = "westeurope"
	WESTUS2       AzureRegions = "westus2"
)

var allowedAzureRegionsEnumValues = []AzureRegions{
	"centralus",
	"eastus2",
	"eastus",
	"francecentral",
	"japaneast",
	"northeurope",
	"southeastasia",
	"uksouth",
	"westeurope",
	"westus2",
}

func (v *AzureRegions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AzureRegions(value)
	for _, existing := range allowedAzureRegionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AzureRegions", value)
}

// NewAzureRegionsFromValue returns a pointer to a valid AzureRegions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureRegionsFromValue(v string) (*AzureRegions, error) {
	ev := AzureRegions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureRegions: valid values are %v", v, allowedAzureRegionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureRegions) IsValid() bool {
	for _, existing := range allowedAzureRegionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to azureRegions value
func (v AzureRegions) Ptr() *AzureRegions {
	return &v
}

type NullableAzureRegions struct {
	value *AzureRegions
	isSet bool
}

func (v NullableAzureRegions) Get() *AzureRegions {
	return v.value
}

func (v *NullableAzureRegions) Set(val *AzureRegions) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureRegions) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureRegions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureRegions(val *AzureRegions) *NullableAzureRegions {
	return &NullableAzureRegions{value: val, isSet: true}
}

func (v NullableAzureRegions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureRegions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// Couchbase, Inc. licenses this to you under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.

// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

package couchbasecapella

import (
	"encoding/json"
	"fmt"
)

// Regions - struct for Regions
type Regions struct {
	AwsRegions   *AwsRegions
	AzureRegions *AzureRegions
}

// AwsRegionsAsRegions is a convenience function that returns AwsRegions wrapped in Regions
func AwsRegionsAsRegions(v *AwsRegions) Regions {
	return Regions{AwsRegions: v}
}

// AzureRegionsAsRegions is a convenience function that returns AzureRegions wrapped in Regions
func AzureRegionsAsRegions(v *AzureRegions) Regions {
	return Regions{AzureRegions: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Regions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AwsRegions
	err = json.Unmarshal(data, &dst.AwsRegions)
	if err == nil {
		jsonAwsRegions, _ := json.Marshal(dst.AwsRegions)
		if string(jsonAwsRegions) == "{}" { // empty struct
			dst.AwsRegions = nil
		} else {
			match++
		}
	} else {
		dst.AwsRegions = nil
	}

	// try to unmarshal data into AzureRegions
	err = json.Unmarshal(data, &dst.AzureRegions)
	if err == nil {
		jsonAzureRegions, _ := json.Marshal(dst.AzureRegions)
		if string(jsonAzureRegions) == "{}" { // empty struct
			dst.AzureRegions = nil
		} else {
			match++
		}
	} else {
		dst.AzureRegions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AwsRegions = nil
		dst.AzureRegions = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Regions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Regions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Regions) MarshalJSON() ([]byte, error) {
	if src.AwsRegions != nil {
		return json.Marshal(&src.AwsRegions)
	}

	if src.AzureRegions != nil {
		return json.Marshal(&src.AzureRegions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Regions) GetActualInstance() interface{} {
	if obj.AwsRegions != nil {
		return obj.AwsRegions
	}

	if obj.AzureRegions != nil {
		return obj.AzureRegions
	}

	// all schemas are nil
	return nil
}

type NullableRegions struct {
	value *Regions
	isSet bool
}

func (v NullableRegions) Get() *Regions {
	return v.value
}

func (v *NullableRegions) Set(val *Regions) {
	v.value = val
	v.isSet = true
}

func (v NullableRegions) IsSet() bool {
	return v.isSet
}

func (v *NullableRegions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegions(val *Regions) *NullableRegions {
	return &NullableRegions{value: val, isSet: true}
}

func (v NullableRegions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

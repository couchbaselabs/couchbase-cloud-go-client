/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// Couchbase, Inc. licenses this to you under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.

// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

package couchbasecapella

import (
	"encoding/json"
)

// ListProjectsResponse struct for ListProjectsResponse
type ListProjectsResponse struct {
	Cursor Cursor    `json:"cursor"`
	Data   []Project `json:"data"`
}

// NewListProjectsResponse instantiates a new ListProjectsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProjectsResponse(cursor Cursor, data []Project) *ListProjectsResponse {
	this := ListProjectsResponse{}
	this.Cursor = cursor
	this.Data = data
	return &this
}

// NewListProjectsResponseWithDefaults instantiates a new ListProjectsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProjectsResponseWithDefaults() *ListProjectsResponse {
	this := ListProjectsResponse{}
	return &this
}

// GetCursor returns the Cursor field value
func (o *ListProjectsResponse) GetCursor() Cursor {
	if o == nil {
		var ret Cursor
		return ret
	}

	return o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value
// and a boolean to check if the value has been set.
func (o *ListProjectsResponse) GetCursorOk() (*Cursor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cursor, true
}

// SetCursor sets field value
func (o *ListProjectsResponse) SetCursor(v Cursor) {
	o.Cursor = v
}

// GetData returns the Data field value
func (o *ListProjectsResponse) GetData() []Project {
	if o == nil {
		var ret []Project
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListProjectsResponse) GetDataOk() (*[]Project, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ListProjectsResponse) SetData(v []Project) {
	o.Data = v
}

func (o ListProjectsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cursor"] = o.Cursor
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListProjectsResponse struct {
	value *ListProjectsResponse
	isSet bool
}

func (v NullableListProjectsResponse) Get() *ListProjectsResponse {
	return v.value
}

func (v *NullableListProjectsResponse) Set(val *ListProjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListProjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListProjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProjectsResponse(val *ListProjectsResponse) *NullableListProjectsResponse {
	return &NullableListProjectsResponse{value: val, isSet: true}
}

func (v NullableListProjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// Couchbase, Inc. licenses this to you under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.

// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

package couchbasecapella

import (
	"encoding/json"
	"fmt"
)

// Provider the model 'Provider'
type Provider string

// List of provider
const (
	AWS   Provider = "aws"
	GCP   Provider = "gcp"
	AZURE Provider = "azure"
)

var allowedProviderEnumValues = []Provider{
	"aws",
	"gcp",
	"azure",
}

func (v *Provider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Provider(value)
	for _, existing := range allowedProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Provider", value)
}

// NewProviderFromValue returns a pointer to a valid Provider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderFromValue(v string) (*Provider, error) {
	ev := Provider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Provider: valid values are %v", v, allowedProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Provider) IsValid() bool {
	for _, existing := range allowedProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to provider value
func (v Provider) Ptr() *Provider {
	return &v
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

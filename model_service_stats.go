/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// Couchbase, Inc. licenses this to you under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.

// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

package couchbasecapella

import (
	"encoding/json"
)

// ServiceStats struct for ServiceStats
type ServiceStats struct {
	Services []string `json:"services"`
	NodeName string   `json:"nodeName"`
	Status   string   `json:"status"`
}

// NewServiceStats instantiates a new ServiceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStats(services []string, nodeName string, status string) *ServiceStats {
	this := ServiceStats{}
	this.Services = services
	this.NodeName = nodeName
	this.Status = status
	return &this
}

// NewServiceStatsWithDefaults instantiates a new ServiceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStatsWithDefaults() *ServiceStats {
	this := ServiceStats{}
	return &this
}

// GetServices returns the Services field value
func (o *ServiceStats) GetServices() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *ServiceStats) GetServicesOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Services, true
}

// SetServices sets field value
func (o *ServiceStats) SetServices(v []string) {
	o.Services = v
}

// GetNodeName returns the NodeName field value
func (o *ServiceStats) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *ServiceStats) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *ServiceStats) SetNodeName(v string) {
	o.NodeName = v
}

// GetStatus returns the Status field value
func (o *ServiceStats) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ServiceStats) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ServiceStats) SetStatus(v string) {
	o.Status = v
}

func (o ServiceStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["services"] = o.Services
	}
	if true {
		toSerialize["nodeName"] = o.NodeName
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableServiceStats struct {
	value *ServiceStats
	isSet bool
}

func (v NullableServiceStats) Get() *ServiceStats {
	return v.value
}

func (v *NullableServiceStats) Set(val *ServiceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStats(val *ServiceStats) *NullableServiceStats {
	return &NullableServiceStats{value: val, isSet: true}
}

func (v NullableServiceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
